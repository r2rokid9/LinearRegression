/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LinearRegressionFrame.java
 *
 * Created on Jul 26, 2009, 5:19:30 PM
 */

package advandb;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import java.io.*;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Arturo III
 */
public class LinearRegressionFrame extends javax.swing.JFrame {

    /** Creates new form LinearRegressionFrame */

    private ArrayList<Float> X_VALUES;
    private ArrayList<Float> Y_VALUES;

    private ArrayList<Float> TEMPORARY_X_VALUES;
    private ArrayList<Float> TEMPORARY_Y_VALUES;

    private float SUMMATION_OF_X;
    private float SUMMATION_OF_Y;

    private float SUMMATION_OF_X_AND_Y;
    private float SUMMATION_OF_X_SQUARED;

    private float INTERCEPT;
    private float SLOPE;

    private int TOTAL_COUNT;

    Connector c = new Connector();

    Connection con;
    ResultSet rs = null;

    public String trainingDataName;
    public String predictingDataName;

    public String Schema = "advandb",User = "root",Password = "1234",TableName = "lineardata";

    DB_Manager_Frame DB_MANAGER;

    public void SET_STRINGS(String s1,String s2)
    {
        trainingDataName = s1;
        predictingDataName = s2;
    }

    public void SET_DB_ATTRIBUTES(String Schema,String User,String Password,String TableName)
    {
        this.Schema = Schema;
        this.User = User;
        this.Password = Password;
        this.TableName = TableName;
        LOAD_BUTTON.setEnabled(true);
    }

    public void ENABLE_POPULATE_BUTTON()
    {
        POPULATE_BUTTON.setEnabled(true);
    }

    private float CALCULATE_PREDICTED_VALUE(float f)
    {
        return INTERCEPT + SLOPE * f;
    }

    private void Populate_Results()
    {
        VALUES_TEXT.setText(""+TOTAL_COUNT);
        SLOPE_TEXT.setText(""+SLOPE);
        INTERCEPT_TEXT.setText(""+INTERCEPT);
        REGRESSION_FORMULA.setText(""+INTERCEPT+" + "+SLOPE+"x");
    }

    private void Calculate_Results()
    {
        float temp = 0;
        int i;

        int ARRAY_LENGTH = X_VALUES.size();
        for (i = 0;i < ARRAY_LENGTH;i++)
            temp += X_VALUES.get(i);

        SUMMATION_OF_X = temp;

        temp = 0;

        for (i = 0;i < ARRAY_LENGTH;i++)
            temp += Y_VALUES.get(i);

        SUMMATION_OF_Y = temp;

        temp = 0;

        for (i = 0;i < ARRAY_LENGTH;i++)
            temp += X_VALUES.get(i)*Y_VALUES.get(i);

        SUMMATION_OF_X_AND_Y = temp;

        temp = 0;

        for (i = 0;i < ARRAY_LENGTH;i++)
            temp += Math.pow(X_VALUES.get(i),2);

        SUMMATION_OF_X_SQUARED = temp;

        SLOPE = ((TOTAL_COUNT)*(SUMMATION_OF_X_AND_Y)-(SUMMATION_OF_X)*(SUMMATION_OF_Y)) / (TOTAL_COUNT*SUMMATION_OF_X_SQUARED-(SUMMATION_OF_X*SUMMATION_OF_X));
        System.out.println(SLOPE);

        INTERCEPT = (SUMMATION_OF_Y - SLOPE*SUMMATION_OF_X) / TOTAL_COUNT;
        System.out.println(INTERCEPT);

        INPUT_TEXT.setEnabled(true);
        PREDICT_BUTTON.setEnabled(true);
    }

    public LinearRegressionFrame() {
        super ("Linear Regression Simulator - by Art Caronongan");
   //     DB_MANAGER = new DB_Manager_Frame(this);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TABLE_CONTENTS = new javax.swing.JTable();
        VALUES_TEXT = new javax.swing.JTextField();
        SLOPE_TEXT = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        INTERCEPT_TEXT = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        REGRESSION_FORMULA = new javax.swing.JTextField();
        LOAD_BUTTON = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        INPUT_TEXT = new javax.swing.JTextField();
        OUTPUT_TEXT = new javax.swing.JTextField();
        PREDICT_BUTTON = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        LOG = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        POPULATE_BUTTON = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        TABLE_CONTENTS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "X", "Y"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Float.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TABLE_CONTENTS.setEnabled(false);
        jScrollPane1.setViewportView(TABLE_CONTENTS);

        VALUES_TEXT.setEditable(false);

        SLOPE_TEXT.setEditable(false);

        jLabel1.setText("Total Values (n)");

        jLabel2.setText("Slope (b)");

        jLabel3.setText("Intercept (a)");

        INTERCEPT_TEXT.setEditable(false);
        INTERCEPT_TEXT.setText(" ");
        INTERCEPT_TEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                INTERCEPT_TEXTActionPerformed(evt);
            }
        });

        jLabel4.setText("Regression Formula");

        REGRESSION_FORMULA.setEditable(false);
        REGRESSION_FORMULA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REGRESSION_FORMULAActionPerformed(evt);
            }
        });

        LOAD_BUTTON.setText("Setup Training Data");
        LOAD_BUTTON.setEnabled(false);
        LOAD_BUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LOAD_BUTTONActionPerformed(evt);
            }
        });

        jLabel6.setText("Input Value:");

        jLabel7.setText("Predicted Value:");

        INPUT_TEXT.setEnabled(false);
        INPUT_TEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                INPUT_TEXTActionPerformed(evt);
            }
        });

        OUTPUT_TEXT.setEditable(false);

        PREDICT_BUTTON.setText("Predict");
        PREDICT_BUTTON.setEnabled(false);
        PREDICT_BUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PREDICT_BUTTONActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial Black", 0, 24));
        jLabel8.setText("Linear Regression Simulator");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 24));
        jLabel9.setText("Training Data");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 24));
        jLabel10.setText("Simulation");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 24));
        jLabel11.setText("Values");

        jLabel12.setText("This portion was created by Arturo P. Caronongan III, for ADVANDB");

        LOG.setColumns(20);
        LOG.setRows(5);
        jScrollPane2.setViewportView(LOG);

        jLabel13.setText("Computation Log:");

        POPULATE_BUTTON.setText("Populate");
        POPULATE_BUTTON.setEnabled(false);
        POPULATE_BUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                POPULATE_BUTTONActionPerformed(evt);
            }
        });

        jButton1.setText("Setup DB");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(143, 143, 143)
                                .addComponent(jLabel9))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(171, 171, 171)
                                .addComponent(jLabel11))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(REGRESSION_FORMULA, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                                    .addComponent(VALUES_TEXT, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SLOPE_TEXT, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(INTERCEPT_TEXT, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(OUTPUT_TEXT)
                                    .addComponent(INPUT_TEXT, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(PREDICT_BUTTON))
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(146, 146, 146)
                                .addComponent(jLabel10))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(LOAD_BUTTON)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(POPULATE_BUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(60, 60, 60))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(POPULATE_BUTTON)
                    .addComponent(jButton1)
                    .addComponent(LOAD_BUTTON))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VALUES_TEXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SLOPE_TEXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(INTERCEPT_TEXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(REGRESSION_FORMULA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(INPUT_TEXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PREDICT_BUTTON))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(OUTPUT_TEXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel13))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void POPULATE_RESULTS()
    {
        try
        {
       //     String FileName = FILE_NAME.getText();
    //        c = new Connector();
   //         c.Open();
   //         rs = null;


  //       con = (Connection) c.getConnection();
            try {
                 Statement stmt = (Statement) con.createStatement();
                 String SQL = "SELECT * FROM "+TableName;
                 rs = stmt.executeQuery(SQL);
            } catch (SQLException ex) {
                Logger.getLogger(LinearRegressionFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
       //     Scanner s = new Scanner(new FileReader(FileName));


            int counter = 0;

            TEMPORARY_X_VALUES = new ArrayList<Float>();
            TEMPORARY_Y_VALUES = new ArrayList<Float>();


            while (rs.next())
            {
                String s1 = rs.getString(trainingDataName);
                TEMPORARY_X_VALUES.add(Float.parseFloat(s1));
                String s2 = rs.getString(predictingDataName);
                TEMPORARY_Y_VALUES.add(Float.parseFloat(s2));
                counter++;
            }

            TOTAL_COUNT = counter;

            Object data [][] = new Object[counter][2];
            for (int i = 0;i < counter;i++)
            {
                data [i][0] = TEMPORARY_X_VALUES.get(i);
                data [i][1] = TEMPORARY_Y_VALUES.get(i);
            }
          //  Scanner s = new Scanner(new FileReader(FileName));

                TABLE_CONTENTS.setModel(new javax.swing.table.DefaultTableModel(
                data,
                new String [] {
                    "X", "Y"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Float.class, java.lang.Float.class
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            });

            X_VALUES = new ArrayList<Float>();
            Y_VALUES = new ArrayList<Float>();

            for (int i = 0;i < counter;i++)
            {
                X_VALUES.add(TEMPORARY_X_VALUES.get(i));
                Y_VALUES.add(TEMPORARY_Y_VALUES.get(i));
            }
            jScrollPane1.setViewportView(TABLE_CONTENTS);

            Calculate_Results();
            Populate_Results();
            con.close();
           // CALCULATE_BUTTON.setEnabled(true);
        }
        catch (SQLException ex) {
            Logger.getLogger(LinearRegressionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (NumberFormatException e2)
        {
            JOptionPane.showMessageDialog(this,
            "A data set in the input file contained a value \n"
                    + "not in a valid number format",
            "ERROR: INVALID INPUT DETECTED",
            JOptionPane.ERROR_MESSAGE);
        }
        catch (IndexOutOfBoundsException e3)
        {
            JOptionPane.showMessageDialog(this,
            "Data pair lacking for the final input",
            "ERROR: LACKING DATA",
            JOptionPane.ERROR_MESSAGE);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,
            "Specified file cannot be opened",
            "ERROR: FILE CANNOT BE OPENED",
            JOptionPane.ERROR_MESSAGE);

            e.printStackTrace();
        }
    }

    public void Set()
    {
        POPULATE_RESULTS();
    }
    
    private void LOAD_BUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LOAD_BUTTONActionPerformed
        // TODO add your handling code here:

        try
        {
       //     String FileName = FILE_NAME.getText();
            c = new Connector();
            c.Open(Schema,User,Password);
            rs = null;


         con = (Connection) c.getConnection();
         //   try {
                 Statement stmt = (Statement) con.createStatement();
                 String SQL = "SELECT * FROM "+TableName;
                 rs = stmt.executeQuery(SQL);
                 InputManager input_manager = new InputManager(rs,this);
                  input_manager.setVisible(true);
         //   } /*catch (SQLException ex) {
              //  Logger.getLogger(LinearRegressionFrame.class.getName()).log(Level.SEVERE, null, ex);
           // }
        }
        catch (NumberFormatException e2)
        {
            JOptionPane.showMessageDialog(this,
            "A data set in the input file contained a value \n"
                    + "not in a valid number format",
            "ERROR: INVALID INPUT DETECTED",
            JOptionPane.ERROR_MESSAGE);
        }
        catch (IndexOutOfBoundsException e3)
        {
            JOptionPane.showMessageDialog(this,
            "Data pair lacking for the final input",
            "ERROR: LACKING DATA",
            JOptionPane.ERROR_MESSAGE);
        }
        catch (SQLException e)
        {
             JOptionPane.showMessageDialog(this,
            "Please check the database settings and try again",
            "ERROR: DATABASE CANNOT BE OPENED",
            JOptionPane.ERROR_MESSAGE);
             LOAD_BUTTON.setEnabled(false);
        }
        catch (Exception e)
        {
             JOptionPane.showMessageDialog(this,
            "Please check the database settings and try again",
            "ERROR: DATABASE CANNOT BE OPENED",
            JOptionPane.ERROR_MESSAGE);
             LOAD_BUTTON.setEnabled(false);

         //   e.printStackTrace();
        }
       //     Scanner s = new Scanner(new FileReader(FileName));

       /*
            int counter = 0;

            TEMPORARY_X_VALUES = new ArrayList<Float>();
            TEMPORARY_Y_VALUES = new ArrayList<Float>();


            while (rs.next())
            {
                String s1 = rs.getString("X");
                TEMPORARY_X_VALUES.add(Float.parseFloat(s1));
                String s2 = rs.getString("Y");
                TEMPORARY_Y_VALUES.add(Float.parseFloat(s2));
                counter++;
            }

            TOTAL_COUNT = counter;

            Object data [][] = new Object[counter][2];
            for (int i = 0;i < counter;i++)
            {
                data [i][0] = TEMPORARY_X_VALUES.get(i);
                data [i][1] = TEMPORARY_Y_VALUES.get(i);
            }
          //  Scanner s = new Scanner(new FileReader(FileName));

                TABLE_CONTENTS.setModel(new javax.swing.table.DefaultTableModel(
                data,
                new String [] {
                    "X", "Y"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Float.class, java.lang.Float.class
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            });

            X_VALUES = new ArrayList<Float>();
            Y_VALUES = new ArrayList<Float>();

            for (int i = 0;i < counter;i++)
            {
                X_VALUES.add(TEMPORARY_X_VALUES.get(i));
                Y_VALUES.add(TEMPORARY_Y_VALUES.get(i));
            }
            jScrollPane1.setViewportView(TABLE_CONTENTS);

            Calculate_Results();
            Populate_Results();
            con.close();
           // CALCULATE_BUTTON.setEnabled(true);
        }
        catch (SQLException ex) {
            Logger.getLogger(LinearRegressionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }        
        catch (NumberFormatException e2)
        {
            JOptionPane.showMessageDialog(this,
            "A data set in the input file contained a value \n"
                    + "not in a valid number format",
            "ERROR: INVALID INPUT DETECTED",
            JOptionPane.ERROR_MESSAGE);
        }
        catch (IndexOutOfBoundsException e3)
        {
            JOptionPane.showMessageDialog(this,
            "Data pair lacking for the final input",
            "ERROR: LACKING DATA",
            JOptionPane.ERROR_MESSAGE);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,
            "Specified file cannot be opened",
            "ERROR: FILE CANNOT BE OPENED",
            JOptionPane.ERROR_MESSAGE);

            e.printStackTrace();
        } */
}//GEN-LAST:event_LOAD_BUTTONActionPerformed

    private void INTERCEPT_TEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_INTERCEPT_TEXTActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_INTERCEPT_TEXTActionPerformed

    private void REGRESSION_FORMULAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REGRESSION_FORMULAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_REGRESSION_FORMULAActionPerformed

    private void PREDICT_BUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PREDICT_BUTTONActionPerformed
        // TODO add your handling code here:
        try
        {
            float fCand = Float.parseFloat(INPUT_TEXT.getText());
            float fOutput = CALCULATE_PREDICTED_VALUE(fCand);
            OUTPUT_TEXT.setText(""+fOutput);

            LOG.setText("");
            LOG.append("= "+INTERCEPT+" + "+SLOPE+"("+fCand+")");
            LOG.append("\n");
            LOG.append("= "+INTERCEPT+" + "+SLOPE*fCand);
            LOG.append("\n");
            LOG.append("= "+fOutput);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,
            "Input is not in a valid number format",
            "ERROR: INVALID NUMBER FORMAT",
            JOptionPane.ERROR_MESSAGE);

            e.printStackTrace();
        }
    }//GEN-LAST:event_PREDICT_BUTTONActionPerformed

    private void INPUT_TEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_INPUT_TEXTActionPerformed
        // TODO add your handling code here:
        try
        {
            float fCand = Float.parseFloat(INPUT_TEXT.getText());
            float fOutput = CALCULATE_PREDICTED_VALUE(fCand);
            OUTPUT_TEXT.setText(""+fOutput);

            LOG.setText("");
            LOG.append("= "+INTERCEPT+" + "+SLOPE+"("+fCand+")");
            LOG.append("\n");
            LOG.append("= "+INTERCEPT+" + "+SLOPE*fCand);
            LOG.append("\n");
            LOG.append("= "+fOutput);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,
            "Input is not in a valid number format",
            "ERROR: INVALID NUMBER FORMAT",
            JOptionPane.ERROR_MESSAGE);

            e.printStackTrace();
        }
    }//GEN-LAST:event_INPUT_TEXTActionPerformed

    private void POPULATE_BUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_POPULATE_BUTTONActionPerformed
        // TODO add your handling code here:
        POPULATE_BUTTON.setEnabled(false);
        POPULATE_RESULTS();
}//GEN-LAST:event_POPULATE_BUTTONActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DB_Manager_Frame f = new DB_Manager_Frame(this,Schema,TableName,User,Password);
        f.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    public void disable()
    {
        POPULATE_BUTTON.setEnabled(false);
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {

        final LinearRegressionFrame f = new LinearRegressionFrame();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                f.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField INPUT_TEXT;
    private javax.swing.JTextField INTERCEPT_TEXT;
    private javax.swing.JButton LOAD_BUTTON;
    private javax.swing.JTextArea LOG;
    private javax.swing.JTextField OUTPUT_TEXT;
    private javax.swing.JButton POPULATE_BUTTON;
    private javax.swing.JButton PREDICT_BUTTON;
    private javax.swing.JTextField REGRESSION_FORMULA;
    private javax.swing.JTextField SLOPE_TEXT;
    private javax.swing.JTable TABLE_CONTENTS;
    private javax.swing.JTextField VALUES_TEXT;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

}
